{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/ToggleButton/index.js","components/Game/service.js","components/ListItem/index.js","components/SizeInput/index.js","components/Game/index.js","index.js"],"names":["Square","highlight","onClick","value","className","style","Board","i","squares","tableSize","renderSquare","key","renderRow","j","tableRow","push","table","ToggleButton","handleChange","marginTop","id","type","onChange","data-tg-off","data-tg-on","htmlFor","checkWinning","line","player","every","pos","calculateWinner","size","index","res","winner","limit","position","Array","keys","tIndex","start","fill","map","newPosition","Math","floor","getRowLine","winning","differ","getColLine","console","log","cut","getDiagLine","getAntiDiagLine","ListItem","move","stepNumber","jumpTo","desc","SizeInput","setMin","setMax","decrease","increase","marginBottom","marginRight","disabled","Game","status","useState","setTableSize","pow","history","setHistory","setStepNumber","xIsNext","setXIsNext","descending","setDescending","current","step","moveList","slice","reverse","forEach","includes","label","checked","newHistory","length","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3555888.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square({ highlight, onClick, value }) {\r\n  return (\r\n    <button className=\"square\"\r\n      style={{ 'color': highlight ? 'red' : 'black' }}\r\n      onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './../Square/index';\r\n\r\nfunction Board({ highlight, squares, onClick, tableSize }) {\r\n  const renderSquare = (i) => {\r\n    return <Square key={i}\r\n      highlight={highlight[i]}\r\n      value={squares[i]}\r\n      onClick={() => onClick(i)}\r\n    />;\r\n  }\r\n\r\n  const renderRow = (i) => {\r\n    let j;\r\n    const tableRow = [];\r\n    for (j = 0; j < tableSize; j = j + 1) {\r\n      tableRow.push(renderSquare(tableSize * i + j))\r\n    }\r\n    return (<div className=\"board-row\" key={i}>\r\n      {tableRow}\r\n    </div>\r\n    )\r\n  }\r\n\r\n  let i;\r\n  const table = [];\r\n  for (i = 0; i < tableSize; i = i + 1) {\r\n    table.push(renderRow(i));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {table}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nfunction ToggleButton({ handleChange }) {\r\n  return (\r\n    <div style={{ marginTop: \"-10px\" }}>\r\n      <input className=\"tgl tgl-flip\"\r\n        id=\"switch\" type=\"checkbox\"\r\n        onChange={handleChange}\r\n      />\r\n      <label className=\"tgl-btn\"\r\n        data-tg-off=\"Ascending\"\r\n        data-tg-on=\"Descending\"\r\n        htmlFor=\"switch\">\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToggleButton;","function checkWinning(squares, line, player) {\r\n  const res = line.every(pos => {\r\n    return (squares[pos] === player);\r\n  });\r\n  return res;\r\n}\r\n\r\nfunction getRowLine(pos, limit, start, size) {\r\n  const line = Array(limit).fill(0).map((value, i) => {\r\n    const newPosition = start + pos[i];\r\n    if (Math.floor(start / size) !== Math.floor(newPosition / size))\r\n      return null;\r\n    return newPosition;\r\n  });\r\n  return line;\r\n}\r\n\r\nfunction getColLine(pos, limit, start, size) {\r\n  const line = Array(limit).fill(0).map((value, i) => {\r\n    const newPosition = start + pos[i] * size;\r\n    return newPosition;\r\n  });\r\n  return line;\r\n}\r\n\r\nfunction getDiagLine(pos, limit, start, size) {\r\n  let cut = false;\r\n  const line = Array(limit).fill(0).map((value, i) => {\r\n    const newPosition = start + pos[i] * size + i;\r\n    if (newPosition % size === (size - 1)) {\r\n      cut = true;\r\n      return newPosition;\r\n    }\r\n    if (cut) return null;\r\n    return newPosition;\r\n  });\r\n  return line;\r\n}\r\n\r\nfunction getAntiDiagLine(pos, limit, start, size) {\r\n  let cut = false;\r\n  const line = Array(limit).fill(0).map((value, i) => {\r\n    const newPosition = start - pos[i] * size + i;\r\n    if (newPosition % size === (size - 1)) {\r\n      cut = true;\r\n      return newPosition;\r\n    }\r\n    if (cut) return null;\r\n    return newPosition;\r\n  });\r\n  return line;\r\n}\r\n\r\nfunction calculateWinner(squares, size, index) {\r\n  const res = {\r\n    winner: null,\r\n    line: null,\r\n  }\r\n\r\n  if (index === null)\r\n    return res;\r\n\r\n  let limit = 3;\r\n  if (size === 4) {\r\n    limit = 4;\r\n  } else if (size >= 5) {\r\n    limit = 5;\r\n  }\r\n\r\n  const player = squares[index];\r\n  const position = [...Array(limit).keys()];\r\n\r\n\r\n  let tIndex = index;\r\n  const differ = 1;\r\n  while ((squares[tIndex] === squares[tIndex - differ]) &&\r\n    (tIndex % size !== 0)) {\r\n    tIndex = tIndex - differ;\r\n  };\r\n  let line = getRowLine(position, limit, tIndex, size);\r\n  let winning = checkWinning(squares, line, player);\r\n  if (!winning) {\r\n    tIndex = index;\r\n    const differ = size;\r\n    while (squares[tIndex] === squares[tIndex - differ]) {\r\n      tIndex = tIndex - differ;\r\n    };\r\n    line = getColLine(position, limit, tIndex, size);\r\n    winning = checkWinning(squares, line, player);\r\n  }\r\n\r\n  if (!winning) {\r\n    tIndex = index;\r\n    const differ = size + 1;\r\n    while ((squares[tIndex] === squares[tIndex - differ]) &&\r\n      (tIndex % size !== 0)) {\r\n      tIndex = tIndex - differ;\r\n    };\r\n    console.log(\"calculateWinner -> tIndex\", tIndex)\r\n    line = getDiagLine(position, limit, tIndex, size);\r\n    winning = checkWinning(squares, line, player);\r\n  }\r\n\r\n  if (!winning) {\r\n    tIndex = index;\r\n    const differ = size - 1;\r\n    while ((squares[tIndex] === squares[tIndex + differ]) &&\r\n      (tIndex % size !== 0)) {\r\n      tIndex = tIndex + differ;\r\n    };\r\n    line = getAntiDiagLine(position, limit, tIndex, size);\r\n    winning = checkWinning(squares, line, player);\r\n  }\r\n\r\n  if (winning) {\r\n    res.winner = player;\r\n    res.line = line;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nexport default calculateWinner;","import React from 'react';\r\n\r\nfunction ListItem({ move, stepNumber, jumpTo, desc }) {\r\n  return (\r\n    <li>\r\n      <button\r\n        style={{ 'fontWeight': stepNumber === move ? 'bold' : 'normal' }}\r\n        onClick={jumpTo}>{desc}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\n\r\nfunction SizeInput({ value, setMin, setMax, decrease, increase }) {\r\n  return (\r\n    <div style={{ marginBottom: \"20px\" }}>\r\n      <span style={{ marginRight: \"5px\" }}>Table size (3~30):</span>\r\n      <div>\r\n        <div className=\"value-button\" onClick={setMin}>min</div>\r\n        <div className=\"value-button\" onClick={decrease}>-</div>\r\n        <input type=\"number\" value={value} disabled />\r\n        <div className=\"value-button\" onClick={increase}>+</div>\r\n        <div className=\"value-button\" onClick={setMax}>max</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SizeInput;","import React, { useState } from 'react';\r\nimport Board from './../Board/index';\r\nimport ToggleButton from './../ToggleButton/index';\r\nimport calculateWinner from './service';\r\nimport ListItem from '../ListItem/index';\r\nimport SizeInput from '../SizeInput/index';\r\n\r\nfunction Game() {\r\n  const size = {\r\n    min: 3,\r\n    max: 30,\r\n  }\r\n  const [tableSize, setTableSize] = useState(3);\r\n  const [history, setHistory] = useState([{\r\n    squares: Array(Math.pow(tableSize, 2)).fill(null),\r\n    index: null,\r\n    winner: null,\r\n  }]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [descending, setDescending] = useState(false);\r\n\r\n  const current = history[stepNumber];\r\n  const winner = calculateWinner(current.squares, tableSize, current.index);\r\n  const highlight = Array(Math.pow(tableSize, 2)).fill(null);\r\n\r\n  const handleClick = (i) => {\r\n    const newHistory = history.slice(0, stepNumber + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (current.winner || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? 'X' : 'O';\r\n    setHistory(newHistory.concat([{\r\n      squares: squares,\r\n      index: i,\r\n      winner: current.winner,\r\n    }]))\r\n    setStepNumber(newHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  const handleChange = () => {\r\n    setDescending(!descending);\r\n  }\r\n\r\n  const setMin = () => {\r\n    setTableSize(size.min);\r\n    jumpTo(0);\r\n  }\r\n\r\n  const setMax = () => {\r\n    setTableSize(size.max);\r\n    jumpTo(0);\r\n  }\r\n\r\n  const decreaseTableSize = () => {\r\n    if (tableSize > size.min) {\r\n      setTableSize(tableSize - 1);\r\n      jumpTo(0);\r\n    }\r\n  }\r\n\r\n  const increaseTableSize = () => {\r\n    if (tableSize < size.max) {\r\n      setTableSize(tableSize + 1);\r\n      jumpTo(0);\r\n    }\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  }\r\n\r\n  const checkDraw = (squares) => {\r\n    return (!squares.includes(null));\r\n  }\r\n\r\n  let moveList = [];\r\n  const list = history.slice();\r\n  list.map((step, move) => {\r\n    const desc = move ?\r\n      'Go to position (' + (Math.floor(step.index / tableSize) + 1) + ', '\r\n      + (step.index % tableSize + 1) + ')'\r\n      : 'Go to game start';\r\n    moveList.push(<ListItem\r\n      key={move}\r\n      move={move}\r\n      stepNumber={stepNumber}\r\n      desc={desc}\r\n      jumpTo={() => jumpTo(move)}\r\n    />);\r\n    return moveList;\r\n  })\r\n  if (descending) {\r\n    moveList.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (winner.winner) {\r\n    current.winner = winner.winner;\r\n    status = 'Winner: ' + winner.winner;\r\n    winner.line.forEach(i => {\r\n      highlight[i] = true;\r\n    })\r\n  } else if (checkDraw(current.squares)) {\r\n    status = 'Game draw!';\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <SizeInput\r\n          value={tableSize}\r\n          setMin={() => setMin()}\r\n          decrease={() => decreaseTableSize()}\r\n          increase={() => increaseTableSize()}\r\n          setMax={() => setMax()}\r\n        />\r\n        <div>{status}</div>\r\n        <ToggleButton\r\n          handleChange={() => handleChange()}\r\n          label=\"Descending move order\"\r\n          checked={descending}\r\n        />\r\n        <ol>\r\n          {moveList}\r\n        </ol>\r\n      </div>\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n          tableSize={tableSize}\r\n          highlight={highlight}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './components/Game/index';\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}