{"version":3,"sources":["index.js"],"names":["Square","props","className","style","highlight","onClick","value","ToggleButton","id","type","onChange","handleChange","data-tg-off","data-tg-on","htmlFor","Board","i","key","this","squares","j","tableRow","maxWidth","push","renderSquare","table","maxHeight","renderRow","React","Component","Game","state","history","Array","fill","index","stepNumber","xIsNext","descending","slice","length","calculateWinner","winner","setState","concat","list","position","map","step","move","desc","jumpTo","includes","status","tableSize","current","moves","renderMoveList","reverse","line","forEach","checkDraw","handleClick","label","checked","res","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b55081e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\"\r\n    style={{'color': props.highlight ? 'red' : 'black'}} \r\n    onClick = {props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction ToggleButton(props) {\r\n  return (\r\n    <div className=\"tg-list-item\">\r\n      <input className=\"tgl tgl-flip\"\r\n        id=\"switch\" type=\"checkbox\"\r\n        onChange={props.handleChange}\r\n      />\r\n      <label className=\"tgl-btn\"\r\n        data-tg-off=\"Ascending\"\r\n        data-tg-on=\"Descending\"\r\n        htmlFor=\"switch\">\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return <Square key={i}\r\n    highlight={this.props.highlight[i]}\r\n    value={this.props.squares[i]}\r\n    onClick = {() => this.props.onClick(i)}\r\n    />;\r\n  }\r\n\r\n  renderRow(i) {\r\n    let j;\r\n    const tableRow = [];\r\n    for (j = 0; j < this.props.maxWidth; j = j + 1) {\r\n      tableRow.push(this.renderSquare(3 * i + j))\r\n    }\r\n    return (<div className=\"board-row\" key={i}>\r\n      {tableRow}\r\n    </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    let i;\r\n    const table = [];\r\n    for (i = 0; i < this.props.maxHeight; i = i + 1) {\r\n      table.push(this.renderRow(i));\r\n    }\r\n    return (\r\n      <div>\r\n        {table}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        index: null,\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      descending: false,\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    \r\n    const winner = calculateWinner(squares);\r\n    if (winner.winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        index: i,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  handleChange() {\r\n    this.setState({\r\n      descending: !this.state.descending,\r\n    })\r\n  }\r\n\r\n  renderMoveList(list) {\r\n    const position = [\r\n      [1, 1], [1, 2], [1, 3],\r\n      [2, 1], [2, 2], [2, 3],\r\n      [3, 1], [3, 2], [3, 3]\r\n    ]\r\n    return list.map((step, move) => {\r\n      const desc = move ? \r\n      'Go to position (' + position[step.index] + ')'  : 'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button style={{'fontWeight': this.state.stepNumber === move ? 'bold' : 'normal'}} \r\n          onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      )\r\n    })\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    })\r\n  }\r\n\r\n  checkDraw(squares) {\r\n    return (!squares.includes(null));\r\n  }\r\n\r\n  render() {\r\n    const tableSize = {\r\n      maxWidth: 3,\r\n      maxHeight: 3,\r\n    }\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const highlight = Array(9).fill(null);\r\n\r\n    const moves = this.renderMoveList(history.slice())\r\n    if (this.state.descending) {\r\n      moves.reverse();\r\n    }\r\n    \r\n    let status;\r\n    if (winner.winner) {\r\n      status = 'Winner: ' + winner.winner;\r\n      winner.line.forEach(i => {\r\n        highlight[i] = true;\r\n      })\r\n    } else if (this.checkDraw(current.squares)) {\r\n      status = 'Game draw!';\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            maxWidth={tableSize.maxWidth}\r\n            maxHeight={tableSize.maxHeight}\r\n            highlight={highlight}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ToggleButton\r\n            handleChange={() => this.handleChange()}\r\n            label=\"Descending move order\"\r\n            checked={this.state.descending}\r\n          />\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const res = {\r\n    winner: null,\r\n    line: null,\r\n  }\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      res.winner = squares[a];\r\n      res.line = lines[i];\r\n      return res;\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}